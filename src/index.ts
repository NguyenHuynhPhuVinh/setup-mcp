#!/usr/bin/env node

import { Command } from 'commander';
import inquirer from 'inquirer';
import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import ora from 'ora';
import { fileURLToPath } from 'url';

// L·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Phi√™n b·∫£n t·ª´ package.json
const version = '1.0.0';

// Kh·ªüi t·∫°o ch∆∞∆°ng tr√¨nh
const program = new Command();

program
  .name('setup-mcp')
  .description('C√¥ng c·ª• thi·∫øt l·∫≠p nhanh ch√≥ng d·ª± √°n MCP (Model Context Protocol)')
  .version(version)
  .option('-t, --template <template>', 'Lo·∫°i template (basic)', 'basic')
  .option('-d, --directory <directory>', 'Th∆∞ m·ª•c ƒë√≠ch', './')
  .action(async (options: { template: string; directory: string }) => {
    console.log(chalk.blue('üöÄ Thi·∫øt l·∫≠p d·ª± √°n MCP m·ªõi'));
    
    // L·∫•y th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: 'T√™n d·ª± √°n:',
        default: path.basename(path.resolve(options.directory)),
      },
      {
        type: 'input',
        name: 'description',
        message: 'M√¥ t·∫£ d·ª± √°n:',
        default: 'M·ªôt MCP server ƒë∆°n gi·∫£n',
      },
      {
        type: 'input',
        name: 'author',
        message: 'T√°c gi·∫£:',
      },
      {
        type: 'input',
        name: 'serverName',
        message: 'T√™n MCP server:',
        default: (answers: { projectName: string }) => answers.projectName,
      },
    ]);
    
    // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë√≠ch
    const targetDir = path.resolve(options.directory);
    
    // Ki·ªÉm tra th∆∞ m·ª•c ƒë√≠ch
    if (fs.existsSync(targetDir) && fs.readdirSync(targetDir).length > 0) {
      const { proceed } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'proceed',
          message: 'Th∆∞ m·ª•c ƒë√≠ch kh√¥ng tr·ªëng. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?',
          default: false,
        },
      ]);
      
      if (!proceed) {
        console.log(chalk.yellow('‚ö†Ô∏è H·ªßy thi·∫øt l·∫≠p.'));
        process.exit(0);
      }
    }
    
    // ƒê∆∞·ªùng d·∫´n template
    const templateDir = path.resolve(__dirname, '../templates', options.template);
    
    // Ki·ªÉm tra template
    if (!fs.existsSync(templateDir)) {
      console.log(chalk.red(`‚ùå Template '${options.template}' kh√¥ng t·ªìn t·∫°i.`));
      process.exit(1);
    }
    
    // Sao ch√©p template
    const spinner = ora('ƒêang thi·∫øt l·∫≠p d·ª± √°n...').start();
    
    try {
      // Sao ch√©p c√°c file t·ª´ template
      await fs.copy(templateDir, targetDir, { overwrite: true });
      
      // ƒê·ªçc v√† c·∫≠p nh·∫≠t c√°c file
      const files = [
        'package.json',
        'README.md',
        'src/index.ts',
      ];
      
      for (const file of files) {
        const filePath = path.join(targetDir, file);
        
        if (fs.existsSync(filePath)) {
          // ƒê·ªçc n·ªôi dung file
          let content = await fs.readFile(filePath, 'utf8');
          
          // Thay th·∫ø c√°c placeholder
          content = content.replace(/\{\{projectName\}\}/g, answers.projectName);
          content = content.replace(/\{\{description\}\}/g, answers.description);
          content = content.replace(/\{\{author\}\}/g, answers.author);
          content = content.replace(/\{\{serverName\}\}/g, answers.serverName);
          
          // Ghi l·∫°i n·ªôi dung ƒë√£ c·∫≠p nh·∫≠t
          await fs.writeFile(filePath, content, 'utf8');
        }
      }
      
      spinner.succeed('D·ª± √°n ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!');
      
      // H∆∞·ªõng d·∫´n ti·∫øp theo
      console.log(chalk.green('\n‚úÖ D·ª± √°n MCP ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!'));
      console.log(chalk.white('\nC√°c b∆∞·ªõc ti·∫øp theo:'));
      console.log(chalk.white(`  1. cd ${path.relative(process.cwd(), targetDir)}`));
      console.log(chalk.white('  2. npm install'));
      console.log(chalk.white('  3. npm run build'));
      console.log(chalk.white('  4. npm start'));
      
      console.log(chalk.blue('\nƒê·ªÉ c·∫•u h√¨nh v·ªõi Claude, Cursor ho·∫∑c Windsurf, h√£y xem h∆∞·ªõng d·∫´n trong README.md'));
      
    } catch (error: unknown) {
      spinner.fail('C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p d·ª± √°n.');
      console.error(chalk.red(`‚ùå L·ªói: ${(error as Error).message}`));
      process.exit(1);
    }
  });

// X·ª≠ l√Ω l·ªánh kh√¥ng x√°c ƒë·ªãnh
program.on('command:*', () => {
  console.error(chalk.red(`‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: ${program.args.join(' ')}`));
  console.log(chalk.white(`Ch·∫°y ${chalk.cyan('setup-mcp --help')} ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn.`));
  process.exit(1);
});

// Ph√¢n t√≠ch ƒë·ªëi s·ªë d√≤ng l·ªánh
program.parse(process.argv);
